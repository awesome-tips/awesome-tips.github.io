list: {
  title: "Web与端交互",
  des: "JS与端交互的技术",
  datas: [
      {
        title: "一本走心的 JS-Native 交互电子书",
        tag: "JS-Native 交互",
        href: "https://github.com/lefex/DSA/issues/16",
        des: "2018 年距离第一代"
    },
     {
        title: "App 离线切换技术方案",
        tag: "离线",
        href: "https://mp.weixin.qq.com/s/zbUWTaxgEySTuM6e-sgHmw",
        des: "有赞零售客户端的用户是需要经营线下门店的商家，在商家的经营时间内，如果软件不能保证正常使用会导致经营效率下降，甚至客户流失。因此除了不断优化软件性能，降低崩溃率，还要做好异常情况的降级处理，比如遇到网络故障和服务器故障等情况时，软件要保证核心功能的可用性，此时软件的工作模式被称为离线模式。"
    },
     {
        title: "动手制作一个简易的iOS动态执行器",
        tag: "JavaScriptCore",
        href: "https://mp.weixin.qq.com/s/eK1zNziFdnPJjJvAeHteyA",
        des: "之前听说滴滴的DynamicCocoa是基于JavaScriptCore搞得，一直期待看到他们的真正实现，不过可能后来由于公司机密，应该不能再开源了。借着最近开始研究JavaScriptCore的契机，我决定利用这一两天所学的JavaScript知识，在业余时间做一个简单的iOS动态执行器玩具。"
    },
    {
        title: "iOS App秒开H5实战总结",
        tag: "作者：肖亚东",
        href: "https://mp.weixin.qq.com/s/1Rfizwcn9EV2rby0btSMaw",
        des: "在《iOS app秒开H5优化探索》一文中简单介绍了优化的方案以及一些知识点，本文继续介绍使用WKURLSchemeHandler拦截加载离线包优化打开速度的一些细节以及注意事项，阅读本文前请先大概了解一下上篇文章的内容以及WKURLSchemeHandler的基本用法。"
    },
    {
        title: "你可能并不需要拦截 WebView 的静态资源",
        tag: "WebView",
        href: "https://mp.weixin.qq.com/s/PQeXHEzxbtYxVWS5lGZuCg",
        des: "假设你在开发一个 Hybird App， 老板嫌 h5 呈现的速度太慢了。你除了希望 h5 本身能够足够快之外，你在想： App 端能做的什么？"
    },
    {
        title: "AppHost：大前端融合下的 Hybrid 开发解决方案",
        tag: "Hybrid",
        href: "https://mp.weixin.qq.com/s/bL6qjBFmAugsILTYAUTwNQ",
        des: "目前移动端开发还处于一个高速发展的阶段，为了应对快速增长业务需求，移动开发需要更高迭代响应速度，从前期涌现出了以 React Native、Weex 为代表的 web 技术栈，到现在的 flutter 为代表的容器栈，这些跨度开发框架试图提高开发效率的同时，也拥有优秀的运行效率，目前看起来正在接近这个目标。"
    },
             {
        title: "WKURLSchemeHandler 的能与不能",
        tag: "WKURLSchemeHandler",
        href: "https://mp.weixin.qq.com/s/VcvZ1C1Qs26v5iB8dwBjcw",
        des: "在作者将 App 里的 UIWebView 切换到 WKWebView 之后，有些功能得到了加强，包括烦人的 Cookie 也很好的解决了，唯独离线包和 webView 里的资源请求拦截一直是个心病，没有很优雅的解决方案。"
    },
         {
        title: "iOS App秒开H5优化总结",
        tag: "H5",
        href: "https://mp.weixin.qq.com/s/rSSuxtmVWcmgJb0sD4z48Q",
        des: "为了快递迭代、更新，公司app有一大模块功能使用H5实现，但是体验比原生差，这就衍生了如何提高H5加载速度，优化体验的问题。此文，记录一下自己的心路历程。"
    },
             {
        title: "探索 messageHandler 的传输性能极限",
        tag: "messageHandler",
        href: "https://mp.weixin.qq.com/s/3lmh_R-QblSnwuWrDaBlKA",
        des: "本次测试的目标是 iOS 8+ 之后提供的 WKWebview 提供的 JS 和 Native 通讯机制之 messageHandler，比较浅显的探索下它各方面的极限。"
    },
         {
        title: "WKWebview 加载过程中的性能指标图解",
        tag: "WKWebview",
        href: "https://mp.weixin.qq.com/s/XNv_3yyk-vH1xOMtPZ4K-A",
        des: "本文讨论 WKWebview 在加载 h5 页面时，Objective-C 里的 WKNavigationDelegate、window.performance.timing、WKUserScriptInjectionTimeAtDocumentStart、WKUserScriptInjectionTimeAtDocumentEnd，以及和前端最常用的document.readystate\domContentLoaded\document.onload 事件等时间维度的关系，为 native 和前端在相互调用时，能够明确沟通的时机。"
    },
         {
        title: "",
        tag: "",
        href: "",
        des: ""
    },
     {
        title: "",
        tag: "",
        href: "",
        des: ""
    },
         {
        title: "",
        tag: "",
        href: "",
        des: ""
    },
     {
        title: "",
        tag: "",
        href: "",
        des: ""
    },
]
}