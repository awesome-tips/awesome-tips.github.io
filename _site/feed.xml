<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-08-27T15:05:57+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">知识小集</title><subtitle>iOS高质量内容推送。</subtitle><entry><title type="html">使用 strong 而不是 assign 修饰 dispatch 对象</title><link href="http://localhost:4000/2019/01/01/%E4%BD%BF%E7%94%A8-strong-%E8%80%8C%E4%B8%8D%E6%98%AF-assign-%E4%BF%AE%E9%A5%B0-dispatch-%E5%AF%B9%E8%B1%A1.html" rel="alternate" type="text/html" title="使用 strong 而不是 assign 修饰 dispatch 对象" /><published>2019-01-01T08:00:00+08:00</published><updated>2019-01-01T08:00:00+08:00</updated><id>http://localhost:4000/2019/01/01/%E4%BD%BF%E7%94%A8%20strong%20%E8%80%8C%E4%B8%8D%E6%98%AF%20assign%20%E4%BF%AE%E9%A5%B0%20dispatch%20%E5%AF%B9%E8%B1%A1</id><content type="html" xml:base="http://localhost:4000/2019/01/01/%E4%BD%BF%E7%94%A8-strong-%E8%80%8C%E4%B8%8D%E6%98%AF-assign-%E4%BF%AE%E9%A5%B0-dispatch-%E5%AF%B9%E8%B1%A1.html">&lt;p&gt;当运行系统是在 iOS6 以下时，是需要通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_retain&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_release&lt;/code&gt; 来管理 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch queue&lt;/code&gt; 的生命周期的，此时应该使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;assign&lt;/code&gt; 来修饰 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_queue_t&lt;/code&gt; 类型的对象。在 iOS6 及以后是通过 ARC 来管理 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch queue&lt;/code&gt; 对象的生命周期的，所以应该使用 strong 来修饰 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_queue_t&lt;/code&gt; 类型的对象。这里以支持 iOS5 系统的 &lt;code class=&quot;highlighter-rouge&quot;&gt;SDWebImage(version:3.7.6)&lt;/code&gt; 的代码举例：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#if OS_OBJECT_USE_OBJC
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define SDDispatchQueueSetterSementics strong
#else
#define SDDispatchQueueSetterSementics assign
#endif
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDDispatchQueueSetterSementics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;barrierQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OS_OBJECT_USE_OBJC&lt;/code&gt; 是一个编译器选项，当我们工程里面设置的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment target&lt;/code&gt; 大于或等于 iOS 6 时，&lt;code class=&quot;highlighter-rouge&quot;&gt;OS_OBJECT_USE_OBJC&lt;/code&gt; 的值会是 1，否则会是 0。因为我们现在的 app 普遍都是支持到 iOS9 或者 iOS8，所以 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_queue_t&lt;/code&gt; 类型的对象都是使用 ARC 来进行管理的，我们使用 strong 来修饰就好了。&lt;/p&gt;

&lt;p&gt;【示例】&lt;/p&gt;

&lt;p&gt;在美团近期开源的 &lt;code class=&quot;highlighter-rouge&quot;&gt;UI&lt;/code&gt; 渲染框架 &lt;code class=&quot;highlighter-rouge&quot;&gt;Graver&lt;/code&gt; 中也发现，错误得使用 assign 来修饰 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_queue_t&lt;/code&gt; 类型的属性（如图一所示），&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/7-1.jpg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对 Graver 框架实际测试时，发现将一个 dispatch_queue_t 类型的局部变量赋值给对 assign 修饰的 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_queue_t&lt;/code&gt; 后（如图二所示），&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/7-2.jpg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;会抛出了野指针异常（如图三所示）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/7-3.jpg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后去 github 上搜了一下“&lt;code class=&quot;highlighter-rouge&quot;&gt;assign dispatch_queue_t&lt;/code&gt;”，发现很多代码也是使用这种错误的写法，所以觉得有必要写个 tip，提醒一下大家。&lt;/p&gt;</content><author><name>NotFound--</name></author><summary type="html">当运行系统是在 iOS6 以下时，是需要通过 dispatch_retain 和 dispatch_release 来管理 dispatch queue 的生命周期的，此时应该使用 assign 来修饰 dispatch_queue_t 类型的对象。在 iOS6 及以后是通过 ARC 来管理 dispatch queue 对象的生命周期的，所以应该使用 strong 来修饰 dispatch_queue_t 类型的对象。这里以支持 iOS5 系统的 SDWebImage(version:3.7.6) 的代码举例：</summary></entry><entry><title type="html">关于UIStackView的一个小知识点</title><link href="http://localhost:4000/2019/01/01/%E5%85%B3%E4%BA%8EUIStackView%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9.html" rel="alternate" type="text/html" title="关于UIStackView的一个小知识点" /><published>2019-01-01T08:00:00+08:00</published><updated>2019-01-01T08:00:00+08:00</updated><id>http://localhost:4000/2019/01/01/%E5%85%B3%E4%BA%8EUIStackView%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9</id><content type="html" xml:base="http://localhost:4000/2019/01/01/%E5%85%B3%E4%BA%8EUIStackView%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9.html">&lt;p&gt;今天分享一个&lt;code class=&quot;highlighter-rouge&quot;&gt;UIStackView&lt;/code&gt;的小知识点,用&lt;code class=&quot;highlighter-rouge&quot;&gt;UIStackView&lt;/code&gt;做水平或垂直布局很方便，搜了大多数UIStackView的资料，大多是教大家如何使用的axis、alignment等属性的。最近使用时遇到了：把&lt;code class=&quot;highlighter-rouge&quot;&gt;UIStackView&lt;/code&gt;中某个视图&lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt;后，&lt;code class=&quot;highlighter-rouge&quot;&gt;UIStackView&lt;/code&gt;的布局会进行更新，只展示没有&lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt;的视图（官方文档截图：图1），&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2018/12/3-1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;例如，你有5个视图平等分显示，设置某个视图&lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt;之后，就会变成4个视图平等分了。&lt;/p&gt;

&lt;p&gt;有的时候这是我们期许的，而有的时候并不是；如果&lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt;某个视图后，不想更改其他视图布局，那么可以设置alpha，或者使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Masonry&lt;/code&gt;的方法，之前小集也提过（图2）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2018/12/3-2.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;了解这个属性之后，免得大家开发过程走弯路，根据情况选择适当的方式布局。&lt;/p&gt;</content><author><name>高老师很忙</name></author><summary type="html">今天分享一个UIStackView的小知识点,用UIStackView做水平或垂直布局很方便，搜了大多数UIStackView的资料，大多是教大家如何使用的axis、alignment等属性的。最近使用时遇到了：把UIStackView中某个视图hidden后，UIStackView的布局会进行更新，只展示没有hidden的视图（官方文档截图：图1），</summary></entry><entry><title type="html">在 UILabel 中渲染 HTML</title><link href="http://localhost:4000/2019/01/01/%E5%9C%A8-UILabel-%E4%B8%AD%E6%B8%B2%E6%9F%93-HTML.html" rel="alternate" type="text/html" title="在 UILabel 中渲染 HTML" /><published>2019-01-01T08:00:00+08:00</published><updated>2019-01-01T08:00:00+08:00</updated><id>http://localhost:4000/2019/01/01/%E5%9C%A8%20UILabel%20%E4%B8%AD%E6%B8%B2%E6%9F%93%20HTML</id><content type="html" xml:base="http://localhost:4000/2019/01/01/%E5%9C%A8-UILabel-%E4%B8%AD%E6%B8%B2%E6%9F%93-HTML.html">&lt;p&gt;我们可以使用 NSAttributedString 在 UILabel 中渲染 HTML 字符串，不过需要使用 NSAttributedString 特定的初始化方法&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DocumentReadingOptionKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[:],&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;documentAttributes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AutoreleasingUnsafeMutablePointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个初始化方法的 options 参数中，指定 .documentType 的值为 NSAttributedString.DocumentType.html。不过大多数情况下这还不够，我们可能还需要指定文本的样式，例如指定文本的字体或颜色，这时我们就需要在 html 文本中通过 css 来设置 style，如下代码所示：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;htmlAttributedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fontName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;colorHex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cssPrefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;style&amp;gt;* { font-family: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontName&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;; color: #&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colorHex&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;; font-size: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;; }&amp;lt;/style&amp;gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cssPrefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;documentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DocumentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;characterEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;documentAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;strong&amp;gt;Dear Friend&amp;lt;/strong&amp;gt; I hope this &amp;lt;i&amp;gt;tip&amp;lt;/i&amp;gt; will be useful for &amp;lt;b&amp;gt;you&amp;lt;/b&amp;gt;.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attributedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;htmlAttributedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Futura&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;colorHex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ff0000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;效果如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/3-1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>南峰子</name></author><summary type="html">我们可以使用 NSAttributedString 在 UILabel 中渲染 HTML 字符串，不过需要使用 NSAttributedString 特定的初始化方法</summary></entry><entry><title type="html">点击cell不执行-[UITableView didSelectRowAtIndexPath:]方法的几种方式</title><link href="http://localhost:4000/2019/01/01/%E7%82%B9%E5%87%BBcell%E4%B8%8D%E6%89%A7%E8%A1%8CUITableView%E7%9A%84-didSelectRowAtIndexPath%E6%96%B9%E6%B3%95%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html" rel="alternate" type="text/html" title="点击cell不执行-[UITableView didSelectRowAtIndexPath:]方法的几种方式" /><published>2019-01-01T08:00:00+08:00</published><updated>2019-01-01T08:00:00+08:00</updated><id>http://localhost:4000/2019/01/01/%E7%82%B9%E5%87%BBcell%E4%B8%8D%E6%89%A7%E8%A1%8CUITableView%E7%9A%84%20didSelectRowAtIndexPath%E6%96%B9%E6%B3%95%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F</id><content type="html" xml:base="http://localhost:4000/2019/01/01/%E7%82%B9%E5%87%BBcell%E4%B8%8D%E6%89%A7%E8%A1%8CUITableView%E7%9A%84-didSelectRowAtIndexPath%E6%96%B9%E6%B3%95%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html">&lt;p&gt;今天分享一个比较常用的知识点，点击某个UITableViewCell不执行&lt;code class=&quot;highlighter-rouge&quot;&gt;-[UITableView didSelectRowAtIndexPath:]&lt;/code&gt;方法的几种方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;可以直接设置&lt;code class=&quot;highlighter-rouge&quot;&gt;cell.userInteractionEnabled = NO&lt;/code&gt;；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以实现UITableViewDelegate中的&lt;code class=&quot;highlighter-rouge&quot;&gt;-[UITableView shouldHighlightRowAtIndexPath:]&lt;/code&gt;方法，设置对应indexPath返回NO；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/10-1.jpg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以实现UITableViewDelegate中的&lt;code class=&quot;highlighter-rouge&quot;&gt;-[UITableView willSelectRowAtIndexPath:]&lt;/code&gt;方法，设置对应indexPath返回nil，不过这种方式cell还是会有高亮效果，需要手动设置对应&lt;code class=&quot;highlighter-rouge&quot;&gt;cell.selectionStyle = UITableViewCellSelectionStyleNone&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上三个方法，都不会进UITableViewDelegate的&lt;code class=&quot;highlighter-rouge&quot;&gt;-[UITableView didSelectRowAtIndexPath:]&lt;/code&gt;方法。用第一种方式设置后，cell上的所有子View都不能被点击了；而第二种方式不会影响cell的子View的响应事件的传递，如果cell上有UIControl的子类，依然可以被点击；第三种方式也不会影响cell的子视图的响应事件，但是需要额外设置不显示高亮效果。当然，你也可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;-[UITableView didSelectRowAtIndexPath:]&lt;/code&gt;方法的对应indexPath直接return，只要你高兴😂，可以根据实际情况选择合适的方法。&lt;/p&gt;

&lt;p&gt;有更优雅的方式，欢迎一起讨论。&lt;/p&gt;</content><author><name>高老师很忙</name></author><summary type="html">今天分享一个比较常用的知识点，点击某个UITableViewCell不执行-[UITableView didSelectRowAtIndexPath:]方法的几种方式：</summary></entry><entry><title type="html">聊聊 iPad 适配</title><link href="http://localhost:4000/2019/01/01/%E8%81%8A%E8%81%8A-iPad-%E9%80%82%E9%85%8D.html" rel="alternate" type="text/html" title="聊聊 iPad 适配" /><published>2019-01-01T08:00:00+08:00</published><updated>2019-01-01T08:00:00+08:00</updated><id>http://localhost:4000/2019/01/01/%E8%81%8A%E8%81%8A%20iPad%20%E9%80%82%E9%85%8D</id><content type="html" xml:base="http://localhost:4000/2019/01/01/%E8%81%8A%E8%81%8A-iPad-%E9%80%82%E9%85%8D.html">&lt;p&gt;在最新版本中，我们为网易有道词典做了完全的 iPad 适配，你可以在 iPad 上横屏、分屏使用有道词典，也完全支持了屏幕旋转后的 UI 调整。今天来聊聊这次的适配体验。&lt;/p&gt;

&lt;p&gt;千言万语总结成一句话：如果你正确使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;autolayout&lt;/code&gt;（使用比例而非固定值），那么即使是原本仅支持竖屏的页面，在打开转屏开关后，页面也不会有太大的问题。况且苹果已经提升了 &lt;code class=&quot;highlighter-rouge&quot;&gt;autolayout&lt;/code&gt; 的性能，所以如果你的 app 未来有支持 iPad 的潜在可能，那么尽可能地全部使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;autolayout&lt;/code&gt; 来布局吧。&lt;/p&gt;

&lt;p&gt;如果现有的大量页面都已经使用了计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt; 的方式来布局，也有解决办法。&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; 的子类 要保证在 &lt;code class=&quot;highlighter-rouge&quot;&gt;layoutSubviews&lt;/code&gt; 方法内进行布局（根据 self 宽高而不是屏幕或 window 尺寸），这本来也是一个标准做法。对于 &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;，系统提供了 &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillLayoutSubviews&lt;/code&gt; 方法，类似于 &lt;code class=&quot;highlighter-rouge&quot;&gt;layoutSubviews&lt;/code&gt;方法，你可以在这里进行 &lt;code class=&quot;highlighter-rouge&quot;&gt;vc.view&lt;/code&gt; 及其子 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt; 的布局。在转屏、分屏后这些方法都会被触发。&lt;/p&gt;

&lt;p&gt;需要注意的是，iPad 上不仅有旋转屏幕的操作，还有分屏的操作，系统也提供了进入分屏的系统通知，如果需要可以进行监听。比如大多数拍照 app 会在进入分屏后为用户弹一个分屏无法拍照的 &lt;code class=&quot;highlighter-rouge&quot;&gt;alert&lt;/code&gt;。&lt;/p&gt;</content><author><name>halohily</name></author><summary type="html">在最新版本中，我们为网易有道词典做了完全的 iPad 适配，你可以在 iPad 上横屏、分屏使用有道词典，也完全支持了屏幕旋转后的 UI 调整。今天来聊聊这次的适配体验。</summary></entry><entry><title type="html">针对 objc_exception_throw 的实用调试技巧</title><link href="http://localhost:4000/2019/01/01/%E9%92%88%E5%AF%B9-objc_exception_throw-%E7%9A%84%E5%AE%9E%E7%94%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7.html" rel="alternate" type="text/html" title="针对 objc_exception_throw 的实用调试技巧" /><published>2019-01-01T08:00:00+08:00</published><updated>2019-01-01T08:00:00+08:00</updated><id>http://localhost:4000/2019/01/01/%E9%92%88%E5%AF%B9%20objc_exception_throw%20%E7%9A%84%E5%AE%9E%E7%94%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7</id><content type="html" xml:base="http://localhost:4000/2019/01/01/%E9%92%88%E5%AF%B9-objc_exception_throw-%E7%9A%84%E5%AE%9E%E7%94%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7.html">&lt;p&gt;相信调试过程中发生崩溃这种事情，大家肯定都遇到过，一般也会给 Xcode 设一个全局共享的异常断点，如图1所示，（如果没有的话，可以设置一波）。当我们调试遇到抛出异常时，Xcode 会自动断点，输出一些关于 Exception 的日志信息。但是有些时候并不见得会输出有用的日志（或者压根就没有日志）只有对应的崩溃栈，如图2所示。&lt;/p&gt;

&lt;p&gt;示例中向 NSArray 发了一条无法响应的消息，崩溃后 Xcode 自动断点到了相应的断点位置（这里其实 Xcode 已经在 console 中输入了对应的崩溃信息，因为一时半会不知道该怎么制造 Xcode 不输出日志的环境，所以将就用这个示例来代替下），同时左边也有了对应的崩溃调用栈。我们可以将调用栈切到最上方的 objc_exception_throw，然后在 console 中输入 po $arg1，因为 arg1 代表的是对象本身，在这里就是 NSException，而它又复写了 description 方法，所以对其 print 输出的是对应的崩溃信息。&lt;/p&gt;

&lt;p&gt;以上其实我们还可以节省一个步骤，就是编辑一下这个全局异常端点，给起加一个 Debugger Command 的 Action，如图3所示，这样就可以在发生 objc_exception_throw 崩溃的时候，就可以自动输出对应的崩溃信息了，而不用再手动切换到栈顶的 objc_exception_throw 再输一遍 po $arg1。需要明确一点的是，这种方式仅适用于 objc_exception_throw 类型的崩溃（模拟器、真机都适用）。&lt;/p&gt;

&lt;p&gt;其他几个有意思的参数值，上面说到 arg1 是当前断点所在方法的接收对象，arg2 是被调用的方法名（在 po 的时候要做一个强转，如 po (SEL)$arg2)，如果有参数则 arg 依次递增。&lt;/p&gt;

&lt;p&gt;另外 lldb 的其它更多命令及便捷或扩展的方式，推荐 Facebook 的 &lt;a href=&quot;https://github.com/facebook/chisel&quot;&gt;Chisel&lt;/a&gt;
个人使用频率最高的就是真机调试动画，放慢动画速度的命令，运行过程中触发任意一个断点，执行 slowanim 即可（默认10倍速慢放，可自行在后面指定慢放倍数，如 slowanim 0.2 就是慢放5倍）。&lt;/p&gt;

&lt;p&gt;如果你有更多的小技巧欢迎分享，欢迎交流~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/9-1.gif?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/9-2.jpg?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/9-3.jpg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考链接：&lt;a href=&quot;https://www.natashatherobot.com/xcode-debugging-trick/&quot;&gt;Xcode: One Weird Debugging Trick That Will Save Your Life&lt;/a&gt;&lt;/p&gt;</content><author><name>Vong_HUST</name></author><summary type="html">相信调试过程中发生崩溃这种事情，大家肯定都遇到过，一般也会给 Xcode 设一个全局共享的异常断点，如图1所示，（如果没有的话，可以设置一波）。当我们调试遇到抛出异常时，Xcode 会自动断点，输出一些关于 Exception 的日志信息。但是有些时候并不见得会输出有用的日志（或者压根就没有日志）只有对应的崩溃栈，如图2所示。</summary></entry><entry><title type="html">Aspects hook 类方法的正确姿势</title><link href="http://localhost:4000/2019/01/01/Aspects-hook-%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF.html" rel="alternate" type="text/html" title="Aspects hook 类方法的正确姿势" /><published>2019-01-01T08:00:00+08:00</published><updated>2019-01-01T08:00:00+08:00</updated><id>http://localhost:4000/2019/01/01/Aspects%20hook%20%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF</id><content type="html" xml:base="http://localhost:4000/2019/01/01/Aspects-hook-%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF.html">&lt;p&gt;说起 AOP，相信大家对 Aspects 都有所耳闻，这里不再做原理解读，如果对其原理感兴趣推荐自行阅读源码或者阅读网上大神写的文章。&lt;/p&gt;

&lt;p&gt;根据其 README，我们知道它对类方法和实例方法都能 hook，那么 hook 类方法第一感觉，直接用类名去调用 Aspects 提供的分类类方法就好，大概像图1这样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/4-1.jpg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;运行起来发现，没有并没有打印我们想要输出的内容，反而输出了一段 Aspects 的错误日志 “Aspects: Blog signature &amp;lt;NSMethodSignature: 0x600001a58c00&amp;gt; doesn’t match (null).”（我猜 Blog 应该是作者笔误，实际上是 Block）。即我们指定的 block 签名和我们要 hook 的方法签名不一致。查看源码，发现用图1这种方式，Aspects 在获取方法签名的时候，使用的是 [[object class] instanceMethodSignatureForSelector:selector]，这个时候获取到的方法签名是 nil。这是为什么呢？&lt;/p&gt;

&lt;p&gt;这里主要是 class 方法和 object_getClass 方法的区别，前者当 object 是类时，则返回本身，当 object 为实例时，则返回类；后者则返回的是 isa 指针的指向，如图2所示。由于这里 object 是类，所以 object.class 返回自身，而自身是没有 selector 对
应的实例方法，所以方法签名返回了 nil。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/4-2.jpg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因此，如果我们如果要 hook 类方法正确的姿势应该如图3所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/4-3.jpg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;即对其 metaClass 进行 hook，因为其实 class 也可以理解成 metaClass 的实例对象。回到上面的例子对 metaClass 调用 class 方法时，返回的是 metaClass 本身，所以 [[object class] instanceMethodSignatureForSelector:selector] 实际上是去 metaClass 的 selector 对应的实例方法，也就是类方法，而 selector 对应的类方法是存在的，所以一切流程正常。这里说的比较绕，推荐一下这张经典的图供（图4）大家参考。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/4-4.jpg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Vong_HUST</name></author><summary type="html">说起 AOP，相信大家对 Aspects 都有所耳闻，这里不再做原理解读，如果对其原理感兴趣推荐自行阅读源码或者阅读网上大神写的文章。</summary></entry><entry><title type="html">Command Not Found</title><link href="http://localhost:4000/2019/01/01/Command-Not-Found.html" rel="alternate" type="text/html" title="Command Not Found" /><published>2019-01-01T08:00:00+08:00</published><updated>2019-01-01T08:00:00+08:00</updated><id>http://localhost:4000/2019/01/01/Command%20Not%20Found</id><content type="html" xml:base="http://localhost:4000/2019/01/01/Command-Not-Found.html">&lt;p&gt;使用终端命令的时候常会出现&lt;code class=&quot;highlighter-rouge&quot;&gt;Command Not Found&lt;/code&gt;这个错误，我们今天聊一聊这个错误出现的基本原因，出现这个问题一般因为下面4种原因；&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;输入命令时语法错误，命令行有语法规则，必须按语法规则写；&lt;/li&gt;
  &lt;li&gt;命令并没有安装，有时候安装的时候忽略了错误；&lt;/li&gt;
  &lt;li&gt;命令被删除或破坏了；&lt;/li&gt;
  &lt;li&gt;用户的 &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; 不正确，大部分原因都是这个导致的；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;出现前三种错误都比较好解决，第四中错误比较常见，有时候明明安装完成了，却还会报这个错误。命令行程序之所以可以执行是因为它本身是一个可执行程序或者是一个脚本。当在终端中输入命令的时候，操作系统会找对应的可执行文件并执行。操作系统会从环境变量&lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;中依次查找可执行文件，直到找到，如果找不到将报 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command Not Found&lt;/code&gt; 这个错误。&lt;/p&gt;

&lt;p&gt;查看我电脑的环境变量  &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; 中包含了（每个路径通过冒号分割）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  ~ echo $PATH
/opt/MonkeyDev/bin:/Library/Frameworks/Python.framework/Versions/3.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果报 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command Not Found&lt;/code&gt; 这个错误，首先通过&lt;code class=&quot;highlighter-rouge&quot;&gt;echo $PATH&lt;/code&gt;查看环境变量中是否已经存在了可执行文件的路径。如果没有打开&lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt;把可执行文件地绝对路径写进去即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ vi $HOME/.bash_profile
export PATH=&quot;$HOME/Library/Android/flutter/bin:$PATH&quot;

// 想让刚配置的 PATH 生效，需要刷新终端
➜  source $HOME/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Lefe_x</name></author><summary type="html">使用终端命令的时候常会出现Command Not Found这个错误，我们今天聊一聊这个错误出现的基本原因，出现这个问题一般因为下面4种原因；</summary></entry><entry><title type="html">Debug Memory Graph检查内存泄漏</title><link href="http://localhost:4000/2019/01/01/Debug-Memory-Graph%E6%A3%80%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html" rel="alternate" type="text/html" title="Debug Memory Graph检查内存泄漏" /><published>2019-01-01T08:00:00+08:00</published><updated>2019-01-01T08:00:00+08:00</updated><id>http://localhost:4000/2019/01/01/Debug%20Memory%20Graph%E6%A3%80%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F</id><content type="html" xml:base="http://localhost:4000/2019/01/01/Debug-Memory-Graph%E6%A3%80%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html">&lt;p&gt;在日常检查内存泄漏时，除了 Instruments 里的 Leaks，还有一个就是 Xcode 8推出的 Debug Memory Graph。&lt;/p&gt;

&lt;p&gt;为了能看到内存详细信息，先打开 Edit Scheme–&amp;gt;Diagnostics, 勾选 Malloc Scribble 和 Malloc Stack。为了避免过多的性能消耗，在 Malloc Stack 中直接选择 Live Allocations Only 即可。
&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/2-1.jpeg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;运行 App，找到查看视图层级 Debug View Hierarchy 边上的三个小圈圈的按钮，这个就是Debug Memory Graph按钮，点击后页面变化如下图。
&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/2-2.jpeg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;左边栏会有当前运行 App 的文件信息，若有内存泄漏，边上会有一个紫色的感叹号。也可以通过下方的 show only leaked blocks 过滤文件。&lt;/p&gt;

&lt;p&gt;中间区域内容是当前文件内存详细信息及对象之间的关联关系。黑色线条代表强引用，不过灰色的线不代表弱引用，只是一些系统级别的引用或者苹果为了优化显示效果而添加的，可直接忽略。&lt;/p&gt;

&lt;p&gt;右边栏点击右上角的 Show the Memory Inspector，会有堆栈信息，并且能直接定位到内存泄漏的代码块。&lt;/p&gt;

&lt;p&gt;当然，在 Runtime Issue navigator 中也可以直接看到内存泄漏的地方。
&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/2-3.jpeg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Debug Memory Graph  它能很方便的定位到内存泄漏的地方，但同时它会有误报的情况。例如，当创建 UIButton 对象并将其添加到 UIToolBars 项目数组时，会发现它被识别为内存泄漏，但我们不明白为什么。它也会将一些系统的信息识别为内存泄漏，如下图，定位到了一个叫&lt;code class=&quot;highlighter-rouge&quot;&gt;UIKeyboardPredictionView&lt;/code&gt;的地方。代码中未用到三方键盘，纯系统键盘唤起。个人理解为系统键盘回收后，其实并没有真正被释放，等到下次唤起键盘时再次使用。我觉得类似这种内存泄漏可以不用管。
&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/2-4.jpeg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如有表述不当，欢迎指出~~&lt;/p&gt;</content><author><name>这个汤圆没有馅</name></author><summary type="html">在日常检查内存泄漏时，除了 Instruments 里的 Leaks，还有一个就是 Xcode 8推出的 Debug Memory Graph。</summary></entry><entry><title type="html">Framework 中混合编程时 umbrella header 设置注意事项</title><link href="http://localhost:4000/2019/01/01/Framework-%E4%B8%AD%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B%E6%97%B6-umbrella-header-%E8%AE%BE%E7%BD%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html" rel="alternate" type="text/html" title="Framework 中混合编程时 umbrella header 设置注意事项" /><published>2019-01-01T08:00:00+08:00</published><updated>2019-01-01T08:00:00+08:00</updated><id>http://localhost:4000/2019/01/01/Framework%20%E4%B8%AD%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B%E6%97%B6%20umbrella%20header%20%E8%AE%BE%E7%BD%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9</id><content type="html" xml:base="http://localhost:4000/2019/01/01/Framework-%E4%B8%AD%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B%E6%97%B6-umbrella-header-%E8%AE%BE%E7%BD%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html">&lt;p&gt;Swift 和 Objective-C 混合编程，当需要在 Swift 中调用 Objective-C 代码时，在 App Target 中，我们依托的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Objective-C Bridging Header&lt;/code&gt;，而在 Framework Target 中，依托的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;unbrella header&lt;/code&gt; ，即 Framework 的主头文件。我们需要做如下配置：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 Build Setting -&amp;gt; Packaging 中将 Defines Module 设置为 YES，如下图所示；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/6-1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 unbrella header  中导入需要暴露的 Objective-C 头文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果这样配置后，发现编译器还是报 &lt;code class=&quot;highlighter-rouge&quot;&gt;Use of undeclared type '**'&lt;/code&gt; 错误，则确认以下两点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unbrella header 和需要暴露的 Objective-C 头文件是否包含在 Framework Target 中，如下图所示；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/6-1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 Build Phases -&amp;gt; Headers 中，将 unbrella header 和需要暴露的 Objective-C 头文件放置在 Public 区域中，所下图所示!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/awesome-tips/iOS-Tips/blob/master/images/2019/01/6-1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样确认后，基本就没什么问题了。&lt;/p&gt;</content><author><name>南峰子</name></author><summary type="html">Swift 和 Objective-C 混合编程，当需要在 Swift 中调用 Objective-C 代码时，在 App Target 中，我们依托的是 Objective-C Bridging Header，而在 Framework Target 中，依托的是 unbrella header ，即 Framework 的主头文件。我们需要做如下配置：</summary></entry></feed>